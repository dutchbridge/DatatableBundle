{% block dutchbridge_datatable %}

    {% block dutchbridge_datatable_html %}

        <table cellpadding="0" cellspacing="0" border="0" class="table table-striped table-bordered table-responsive" id="{{ id }}">
            <thead>
                <tr>
                    {% for th in tableHeaders %}
                        <th>{{ th|trans }}</th>
                    {% endfor %}
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>

    {% endblock %}

    {% block dutchbridge_datatable_js %}

        <script>
            var oTable = null;
            var anOpen = null;
            $(document).ready(function () {

                var selector = "#{{ id }}";

                var defaults = {
                    "bProcessing": true,
                    "bServerSide": true,
                    "sAjaxSource": "{{ path(sAjaxSource, routeParameters) }}",
                    "sDom": "<'row'<'{{ sDomOptions.sDomLength }}'l><'{{ sDomOptions.sDomFilter }}'f>r>t<'row'<'{{ sDomOptions.sDomInfo }}'i><'{{ sDomOptions.sDomPagination }}'p>>",
                    "sPaginationType": "bootstrap",
                    "aLengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
                    "iDisplayLength": 10,
                    "oLanguage": {
                        "sProcessing": "<img src='{{ asset('bundles/dutchbridgedatatable/images/loading.gif') }}' style='margin-left: 20px; margin-bottom: 5px;' />" + " {{ 'dutchbridge.datatable.sProcessing'|trans({}, 'DatatableBundle') }}",
                        "sLengthMenu": "{{ 'dutchbridge.datatable.sLengthMenu'|trans({}, 'DatatableBundle') }}",
                        "sZeroRecords": "{{ 'dutchbridge.datatable.sZeroRecords'|trans({}, 'DatatableBundle') }}",
                        "sInfo": "{{ 'dutchbridge.datatable.sInfo'|trans({}, 'DatatableBundle') }}",
                        "sInfoEmpty": "{{ 'dutchbridge.datatable.sInfoEmpty'|trans({}, 'DatatableBundle') }}",
                        "sInfoFiltered": "{{ 'dutchbridge.datatable.sInfoFiltered'|trans({}, 'DatatableBundle') }}",
                        "sInfoPostFix": "{{ 'dutchbridge.datatable.sInfoPostFix'|trans({}, 'DatatableBundle') }}",
                        "sSearch": "{{ 'dutchbridge.datatable.sSearch'|trans({}, 'DatatableBundle') }}",
                        "sUrl": "",
                        "oPaginate": {
                            "sFirst": "{{ 'dutchbridge.datatable.sFirst'|trans({}, 'DatatableBundle') }}",
                            "sPrevious": "{{ 'dutchbridge.datatable.sPrevious'|trans({}, 'DatatableBundle') }}",
                            "sNext": "{{ 'dutchbridge.datatable.sNext'|trans({}, 'DatatableBundle') }}",
                            "sLast": "{{ 'dutchbridge.datatable.sLast'|trans({}, 'DatatableBundle') }}"
                        }
                    }
                };

                $.extend(defaults, {
                    "aoColumns": [
                {% for field in fields %}
                    {
                        {% if field.mData != null %}
                            "mData": "{{ field.mData }}",
                        {% else %}
                            "mData": null,
                        {% endif %}

                        {% if field.sName != '' %}
                            "sName": "{{ field.sName }}",
                        {% endif %}

                        {% if field.sClass != '' %}
                            "sClass": "{{ field.sClass }}",
                        {% endif %}

                        {% if field.renderArray == true %}
                            "mRender": "[, ].{{ field.renderArrayFieldName }}",
                        {% endif %}

                        {% if field.mRender != null %}
                            "mRender": function(data, type, full) {
                                return {{ field.mRender }};
                            },
                        {% endif %}

                        {% if field.bSortable == false %}
                            "bSortable": false,
                        {% else %}
                            "bSortable": true,
                        {% endif %}

                        {% if field.bSearchable == false %}
                            "bSearchable": false,
                        {% else %}
                            "bSearchable": true,
                        {% endif %}

                        {% if field.sWidth != '' %}
                            "sWidth": "{{ field.sWidth }}"
                        {% endif %}
                    },
                {% endfor %}
                    ]
                });

                oTable = $(selector).dataTable(defaults);

                anOpen = [];


                  $(document).on('click', '[data-action="more"]', function(){
                     var nTr = this.parentNode.parentNode;
                     var i = $.inArray( nTr, anOpen );  
                      
                     if ( i === -1 ) {
                        $('i', this).attr( 'class', 'icon-minus');
                        oTable.fnOpen( nTr, fnFormatDetails(oTable, nTr), 'details' );
                        anOpen.push( nTr );
                      }
                      else {
                        $('i', this).attr( 'class', 'icon-plus');
                        oTable.fnClose( nTr );
                        anOpen.splice( i, 1 );
                      }
                  });
            });

        </script>

    {% endblock %}

    {% block dutchbridge_datatable_render_functions %}

        <script>

            function render_action_icons(data, type, full) {
                if (type != "display")
                    return data;

                var actions = [];
                {% for action in actions %}
                    {% if (action.type == 'route') %}
                        var icon   = '{{action.icon}}';
                        var routeParameters = {};
                        {% for name,parameter in action.routeParameters %}
                            var name = '{{name}}';
                            var parameter = '{{parameter}}';
                            if (full[parameter]) {
                                routeParameters[name] = full[parameter];
                            }
                        {% endfor %}
                        {% for name,parameter in action.routeParameters('values') %}
                            var name = '{{name}}';
                            var parameter = '{{parameter}}';
                            routeParameters[name] = parameter;
                        {% endfor %}
                        var route  = Routing.generate('{{action.route}}', routeParameters);
                        var attributes = "";
                        {% for attr,value in action.attributes %}
                            attributes += '{{attr}}="{{value}}"';
                        {% endfor %}
                        var action = '<a href="'+route+'" class="{{action.class}}" '+attributes+'>'+(icon?'<i class="'+icon+'"></i>':'')+'{{action.label|trans}}'+'</a>';
                    {% endif %}
                    actions.push(action);
                {% endfor %}

                var html = actions.join(' ');

                return html;
            }

            function render_boolean_icons(data, type, full) {
                if (type != "display")
                    return data;

                if (data == true) {
                    return "<i class='icon-ok'></i>";
                } else {
                    return "<i class='icon-remove'></i>";
                }
            }

            function render_date(data, type, full) {
                if (type != "display")
                    return data;
                if (data && data.timestamp) {
                    return '<span data-livestamp="'+data.timestamp+'"></span>';
                }

               return null;
            }

            function render_plus_icon(data, type, full) {
                if (type != "display")
                    return data;

                return "<i class='icon-plus'></i>";
            }

        </script>

    {% endblock %}

{% endblock  %}